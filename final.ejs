<!DOCTYPE html>
<html>

<title>
    Swizo | RESULTS FOUND !
</title>
<script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/control_utils/control_utils.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Glide.js/3.2.0/glide.min.js"></script>
<head>

</head>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        background-color: #3e3e3e;
    }
    
    .main-container {
        padding: 30px;
    }
    /* HEADING */
    
    .heading {
        text-align: center;
    }
    
    .heading__title {
        font-weight: 600;
        width: auto;
        height: auto;
        overflow: hidden;
    }
    
    .heading__credits {
        margin: 10px 0px;
        color: #888888;
        font-size: 25px;
        transition: all 0.5s;
    }
    
    .heading__link {
        text-decoration: none;
    }
    
    .heading__credits .heading__link {
        color: inherit;
    }
    /* CARDS */
    
    .cards {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }
    
    .card {
        margin: 20px;
    padding: 20px;
    width: 500px;
    height: 400px;
    min-height: 200px;
    display: grid;
    grid-template-rows: 20px 50px 1fr 50px;
    border-radius: 10px;
    box-shadow: 0px 6px 10px rgb(0 0 0 / 25%);
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    flex-direction: column;
    }
    
    .card:hover {
        box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.4);
        transform: scale(1.01);
    }
    
    .card__link,
    .card__exit,
    .card__icon {
        position: relative;
        text-decoration: none;
        color: rgba(255, 255, 255, 0.9);
    }
    
    .card__link::after {
        position: absolute;
        top: 25px;
        left: 0;
        content: "";
        width: 0%;
        height: 3px;
        background-color: rgba(255, 255, 255, 0.6);
        transition: all 0.5s;
    }
    
    .card__link:hover::after {
        width: 100%;
    }
    
    .card__exit {
        grid-row: 1/2;
        justify-self: end;
    }
    
    .card__icon {
        grid-row: 2/3;
        font-size: 30px;
    }
    
    .card__title {
        grid-row: 3/4;
        font-weight: 400;
        color: #ffffff;
        overflow: hidden;
    }
    
    .card__apply {
        grid-row: 4/5;
        align-self: center;
    }
    /* CARD BACKGROUNDS */
    
    .card-1 {
        background: radial-gradient(#1fe3f500, #0000008e);
    }
    
    .card-2 {
        background: radial-gradient(#fbc1cc, #fa99b2);
    }
    
    .card-3 {
        background: radial-gradient(#76b2fe, #b69efe);
    }
    
    .card-4 {
        background: radial-gradient(#60efbc, #58d5c9);
    }
    
    .card-5 {
        background: radial-gradient(#f588d8, #c0a3e5);
    }
    /* RESPONSIVE */
    
    @media (max-width: 1600px) {
        .cards {
            justify-content: center;
        }
    }
</style>
<style>
    .lines {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        height: 100%;
        margin: auto;
        width: 90vw;
        z-index: -1;
    }
    
    .line {
        position: absolute;
        width: 1px;
        height: 100%;
        top: 0;
        left: 50%;
        background: rgba(255, 255, 255, 0.1);
        overflow: hidden;
    }
    
    .line::after {
        content: '';
        display: block;
        position: absolute;
        height: 15vh;
        width: 100%;
        top: -50%;
        left: 0;
        background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, #ffffff 75%, #ffffff 100%);
        animation: drop 7s 0s infinite;
        animation-fill-mode: forwards;
        animation-timing-function: cubic-bezier(0.4, 0.26, 0, 0.97);
    }
    
    .line:nth-child(1) {
        margin-left: -25%;
    }
    
    .line:nth-child(1)::after {
        animation-delay: 2s;
    }
    
    .line:nth-child(3) {
        margin-left: 25%;
    }
    
    .line:nth-child(3)::after {
        animation-delay: 2.5s;
    }
    
    @keyframes drop {
        0% {
            top: -50%;
        }
        100% {
            top: 110%;
        }
    }
</style>
<style>
      #scrolling {
  background-color: #3e3e3e;
  position: relative;
  overflow: hidden;
}
#scrolling:before, #scrolling:after {
  content: '';
  display: block;
  background-color: #3e3e3e;
  width: 100%;
  height: 75px;
  position: absolute;
  z-index: 99;
}
#scrolling:before {
  border-radius: 0% 0% 50% 50% / 0% 0% 100% 100%;
  top: 15px;
}
#scrolling:after {
  border-radius: 50% 50% 0% 0% / 100% 100% 0% 0%;
  bottom: 15px;
}
.glide__slides {
  display: flex;
}
.glide__slide {
  width: initial;
}

</style>
<body>
    <%      var itemCount=0     %>
        <div class="lines">
            <div class="line"></div>
            <div class="line"></div>
            <div class="line"></div>
        </div>

        <!-- <h1 style="color: green"> GeeksForGeeks </h1> -->
        <center>
            <div style="font-family: monospace;text-transform:uppercase;font-size: 35px;margin: 40px;color:white">
                <%=final[0] %> <span><%=final.length%> Results Found</span>
            </div>
        </center>

        <div class="container" style="position:absolute;top: 0px;right:0px;z-index: 100;">
            <video class="input_video" width="0px" height="0px"></video>
            <canvas class="output_canvas" width="300px" height="200px" style="transform:rotateY(180deg)">
            </canvas>
        </div>
        
         
        
        <div class="glide">
          <div id="scrolling">
            <div class="glide__track" data-glide-el="track">
            <ul class="glide__slides">
                <% for(var i=1; i <final.length; i++) {  %>
                    <li class="glide__slide">
                        <div class="cards" style="display:flex;align-items:center;justify-content:center;flex-wrap: wrap;">
                            <a href="<%=final[i].link%>" id="linkBtn-<%=i%>" target='_blank' style="text-decoration: underline;color:gray;">
                                <div class="card card-1">
    
                                    <div class="heading__title" style="overflow:hidden">
                                        <%=final[i].title%>
                                    </div>
                                    <!-- <p class="heading__credits"><a class="heading__link" target="_blank" href="https://dribbble.com/sl">Design by Simon Lurwer on Dribbble</a></p> -->
                                    <div class="card__title" style="overflow:hidden">
                                        <%=final[i].link%>
                                    </div>
    
                                </div>
                            </a>
                        </div>
                    </li>
             <% } %>
            </ul>
            </div>
          </div>
          <div class="glide__arrows" data-glide-el="controls">
            <button class="glide__arrow glide__arrow--left next" id="left" data-glide-dir="<">prev</button>
            <button class="glide__arrow glide__arrow--right prev" id="right" data-glide-dir=">">next</button>
          </div>
        </div>
          


<script>
    var glide = new Glide('.glide', {
    type: 'carousel',
    perView: 3
  })
  
  glide.mount()
  </script>

  
  
  <script type="module">
  const videoElement = document.getElementsByClassName('input_video')[0];
  const canvasElement = document.getElementsByClassName('output_canvas')[0];
  const canvasCtx = canvasElement.getContext('2d');
  var ox,oy;
  var start=0;
  
  
  function coords(x,y)
  {
    console.log(y);
    // console.log(ox-x);
    if(ox-x>=10)
    {
      console.log('left')
      document.getElementById('left').click();
      
    }else if(Math.abs(ox-x)>=10)
    {
      console.log('right')
      document.getElementById('right').click();
    } 

    if(oy-y>=30)
    {
        console.log('search');
        try{
            var a=document.querySelector('.glide__slide--active a').id;
            a=parseInt(a.split('-')[1]);
            document.getElementById(`linkBtn-${a+1}`).click();
        }catch(e)
        {
            console.log(e)
        }
        
        
    }
    ox=x;
    oy=y;
  }
  
  function onResults(results) {
    canvasCtx.save();
    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
    canvasCtx.drawImage(
        results.image, 0, 0, canvasElement.width, canvasElement.height);
    if (results.multiHandLandmarks) {
      for (const landmarks of results.multiHandLandmarks) {
        if(start==0)
        {
          ox=landmarks[12].x;
          start++;
        }else{
          coords(landmarks[12].x * 100,landmarks[12].y * 100)
        }
        drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS,
                       {color: '#ffffff', lineWidth: 1});
        // drawLandmarks(canvasCtx, landmarks, {color: '#FF0000', lineWidth: 1});
      }
    }
    canvasCtx.restore();
  }
  
  const hands = new Hands({locateFile: (file) => {
    return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;
  }});
  hands.setOptions({
    maxNumHands: 1,
    modelComplexity: 1,
    minDetectionConfidence: 0.5,
    minTrackingConfidence: 0.5
  });
  hands.onResults(onResults);
  
  const camera = new Camera(videoElement, {
    onFrame: async () => {
      await hands.send({image: videoElement});
    },
    width: 1280,
    height: 720
  });
  camera.start();
  </script> 

</body>
</html>
